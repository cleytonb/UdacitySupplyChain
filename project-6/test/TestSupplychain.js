// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1;
    var upc = 1;
    const ownerID = accounts[0];
    const originFarmerID = accounts[1];
    const originFarmName = "John Doe";
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770";
    const originFarmLongitude = "144.341490";
    var productID = sku + upc;
    const productNotes = "Best beans for Espresso";
    const productPrice = web3.utils.toWei("1", "ether");
    const retailProductPrice = web3.utils.toWei("1.1", "ether");
    var itemState = 0;
    const distributorID = accounts[2];
    const retailerID = accounts[3];
    const consumerID = accounts[4];
    const emptyAddress = '0x00000000000000000000000000000000000000';

    console.log("ganache-cli accounts used here...");
    console.log("Contract Owner: accounts[0] ", accounts[0]);
    console.log("Farmer: accounts[1] ", accounts[1]);
    console.log("Distributor: accounts[2] ", accounts[2]);
    console.log("Retailer: accounts[3] ", accounts[3]);
    console.log("Consumer: accounts[4] ", accounts[4]);

    before(async() => {
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.addFarmer(originFarmerID);
        await supplyChain.addDistributor(distributorID);
        await supplyChain.addRetailer(retailerID);
        await supplyChain.addConsumer(consumerID);
    })

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes);
        const events = await supplyChain.getPastEvents('Harvested');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], 0, 'Error: Invalid item State');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[4], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[5], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[6], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[7], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[8], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');

        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid item price');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item retail price');
        assert.equal(resultBufferTwo[6], 0, 'Error: Invalid distributorID');
        assert.equal(resultBufferTwo[7], 0, 'Error: Invalid retailerID');
        assert.equal(resultBufferTwo[8], 0, 'Error: Invalid consumerID');

        assert.equal(events.length, 1, 'Invalid event emitted');
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.processItem(upc, { from: originFarmerID });
        const events = await supplyChain.getPastEvents('Processed');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], 1, 'Error: Invalid item State');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[4], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[5], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[6], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[7], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[8], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');

        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid item price');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item retail price');
        assert.equal(resultBufferTwo[6], 0, 'Error: Invalid distributorID');
        assert.equal(resultBufferTwo[7], 0, 'Error: Invalid retailerID');
        assert.equal(resultBufferTwo[8], 0, 'Error: Invalid consumerID');

        assert.equal(events.length, 1, 'Invalid event emitted');
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.packItem(upc, { from: originFarmerID });
        const events = await supplyChain.getPastEvents('Packed');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], 2, 'Error: Invalid item State');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[4], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[5], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[6], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[7], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[8], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');

        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid item price');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item retail price');
        assert.equal(resultBufferTwo[6], 0, 'Error: Invalid distributorID');
        assert.equal(resultBufferTwo[7], 0, 'Error: Invalid retailerID');
        assert.equal(resultBufferTwo[8], 0, 'Error: Invalid consumerID');

        assert.equal(events.length, 1, 'Invalid event emitted');
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });
        const events = await supplyChain.getPastEvents('ForSale');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], 3, 'Error: Invalid item State');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[4], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[5], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[6], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[7], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[8], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');

        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item price');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item retail price');
        assert.equal(resultBufferTwo[6], 0, 'Error: Invalid distributorID');
        assert.equal(resultBufferTwo[7], 0, 'Error: Invalid retailerID');
        assert.equal(resultBufferTwo[8], 0, 'Error: Invalid consumerID');

        assert.equal(events.length, 1, 'Invalid event emitted');
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        const balanceBefore = web3.utils.toBN(await web3.eth.getBalance(originFarmerID));

        await supplyChain.buyItem(upc, { from: distributorID, value: productPrice });
        const events = await supplyChain.getPastEvents('Sold');
        
        const balanceAfter = web3.utils.toBN(await web3.eth.getBalance(originFarmerID));
        const expectedBalanceAfter = balanceBefore.add(web3.utils.toBN(productPrice));

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(balanceAfter.toString(), expectedBalanceAfter.toString(), 'Error: Farmer did not receive his money');
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], 4, 'Error: Invalid item State');
        assert.equal(resultBufferOne[3], distributorID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[4], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[5], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[6], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[7], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[8], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');

        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item price');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item retail price');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributorID');
        assert.equal(resultBufferTwo[7], 0, 'Error: Invalid retailerID');
        assert.equal(resultBufferTwo[8], 0, 'Error: Invalid consumerID');

        assert.equal(events.length, 1, 'Invalid event emitted');
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.shipItem(upc, { from: distributorID });
        const events = await supplyChain.getPastEvents('Shipped');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], 5, 'Error: Invalid item State');
        assert.equal(resultBufferOne[3], distributorID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[4], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[5], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[6], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[7], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[8], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');

        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item price');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item retail price');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributorID');
        assert.equal(resultBufferTwo[7], 0, 'Error: Invalid retailerID');
        assert.equal(resultBufferTwo[8], 0, 'Error: Invalid consumerID');

        assert.equal(events.length, 1, 'Invalid event emitted');
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.receiveItem(upc, { from: retailerID });
        const events = await supplyChain.getPastEvents('Received');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], 6, 'Error: Invalid item State');
        assert.equal(resultBufferOne[3], retailerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[4], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[5], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[6], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[7], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[8], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');

        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item price');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item retail price');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID');
        assert.equal(resultBufferTwo[8], 0, 'Error: Invalid consumerID');

        assert.equal(events.length, 1, 'Invalid event emitted');
    })    

    // 8th Test
    it("Testing smart contract function retailSellItem() that allows a retailer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.retailSellItem(upc, retailProductPrice, { from: retailerID });
        const events = await supplyChain.getPastEvents('ForRetailSale');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], 7, 'Error: Invalid item State');
        assert.equal(resultBufferOne[3], retailerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[4], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[5], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[6], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[7], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[8], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');

        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item price');
        assert.equal(resultBufferTwo[5], retailProductPrice, 'Error: Invalid item retail price');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID');
        assert.equal(resultBufferTwo[8], 0, 'Error: Invalid consumerID');

        assert.equal(events.length, 1, 'Invalid event emitted');
    })    

    // 9th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        const balanceBefore = web3.utils.toBN(await web3.eth.getBalance(retailerID));

        await supplyChain.purchaseItem(upc, { from: consumerID, value: retailProductPrice });
        const events = await supplyChain.getPastEvents('Purchased');
        
        const balanceAfter = web3.utils.toBN(await web3.eth.getBalance(retailerID));
        const expectedBalanceAfter = balanceBefore.add(web3.utils.toBN(retailProductPrice));

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(balanceAfter.toString(), expectedBalanceAfter.toString(), 'Error: Distributor did not receive his money');
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], 8, 'Error: Invalid item State');
        assert.equal(resultBufferOne[3], consumerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[4], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[5], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[6], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[7], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[8], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');

        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item price');
        assert.equal(resultBufferTwo[5], retailProductPrice, 'Error: Invalid item retail price');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid consumerID');

        assert.equal(events.length, 1, 'Invalid event emitted');
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], 8, 'Error: Invalid item State');
        assert.equal(resultBufferOne[3], consumerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[4], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[5], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[6], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[7], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[8], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
                
        // Verify the result set:
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item price');
        assert.equal(resultBufferTwo[5], retailProductPrice, 'Error: Invalid item retail price');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid consumerID');
        
    })

});

